/***
 * Author: Raj Pradeep Gandhi
 * This program contains the methods for accessing the database and perform required
 * activities.
 */

import com.mysql.cj.jdbc.MysqlDataSource;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.*;
import java.time.Instant;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ThreadLocalRandom;

class StoreAPIMysqlImpl implements StoreAPI {
    // locks are required to make the application thread safe
    private static final Object createAccountLock = new Object();
    private static final Object addProductLock = new Object();
    private static final Object updateStockLevelLock = new Object();
    private static final Object submitOrderLock = new Object();
    private static final Object postReviewLock = new Object();

    public static int getRandomNumber(int min, int max) {
        return ThreadLocalRandom.current().nextInt(min, max + 1);
    }

    /***
     * This method creates the account in the database.
     * @pa ram username
     * @param password
     * @param firstName
     * @param lastName
     */
    @Override
    public void createAccount(String username, String password, String firstName, String lastName) {
        synchronized (createAccountLock) {
            Connection conn = null;
            PreparedStatement pstmt = null;
            try {
                // transaction begins
                conn = getMySQLDataSource().getConnection();
                conn.setAutoCommit(false);

                String userInsert = "INSERT INTO users(username,password,first_name,last_name)"
                        + "VALUES(?,?,?,?)";
                pstmt = conn.prepareStatement(userInsert);
                pstmt.setString(1, username);
                pstmt.setString(2, password);
                pstmt.setString(3, firstName);
                pstmt.setString(4, lastName);
                pstmt.execute();
                conn.commit();
                System.out.println("Account is successfully created for user: " + username);

            } catch (SQLIntegrityConstraintViolationException sicv) {
                try {
                    System.out.println("Unable to add duplicate user " + username);
                    System.out.println("Rolling back changes");
                    conn.rollback();
                } catch (SQLException sqe) {
                    System.out.println("Unable to Rollback changes, please find below stack trace");
                    sqe.printStackTrace();
                }
            } catch (SQLException sq) {
                try {
                    System.out.println("SQL Exception occurred");
                    System.out.println("Error Rolling back changes");
                    conn.rollback();
                } catch (SQLException sqe) {
                    System.out.println("Unable to Rollback changes, please find below stack trace");
                    sqe.printStackTrace();
                }
                sq.printStackTrace();
            } finally {
                try {
                    pstmt.close();
                    conn.close();
                } catch (SQLException sq) {
                    System.out.println("Unable to close connection, please find below stack trace");
                    sq.printStackTrace();
                }
            }
        }
    }

    /***
     * This method is used to submit the order to the database. Order id will be generated by using unix epoch timestamp
     * and adding random numbers.
     * @param orderDate: Date at which order is submitted
     * @param username: Username
     * @param password: Password
     * @param listOfProductsAndQuantities: List of products required in this order
     */
    @Override
    public void submitOrder(String orderDate, String username, String password, HashMap<Long, Integer> listOfProductsAndQuantities) {
        synchronized (submitOrderLock) {
            // check if username and password matches the one in the db.
            if (authorized(username, password)) {
                // check if any items are present in the order
                if (listOfProductsAndQuantities.size() > 0) {
                    Connection conn = null;
                    PreparedStatement psmt_order = null;
                    PreparedStatement psmt_order_details = null;
                    ResultSet rs = null;
                    Statement stmt = null;
                    // flag is used to track if order was successfully submitted. this is used for tracking
                    // closing appropriate connections
                    Boolean isOrderSubmitted = false;
                    PreparedStatement stmt_remove_quantity = null;
                    long order_id = Instant.now().getEpochSecond() + getRandomNumber(1, 5000000);
                    try {
                        conn = getMySQLDataSource().getConnection();
                        conn.setAutoCommit(false);
                        stmt = conn.createStatement();
                        // check if required quantity is available in stock
                        if (isEnoughStock(listOfProductsAndQuantities)) {
                            // fill the order table
                            isOrderSubmitted = true;
                            String order_sql = "Insert into Orders (order_id,username,date) values(?,?,?)";
                            psmt_order = conn.prepareStatement(order_sql);
                            psmt_order.setLong(1, order_id);
                            psmt_order.setString(2, username);
                            psmt_order.setString(3, orderDate);
                            psmt_order.execute();
                            // fill the order detail table
                            for (Map.Entry mapElement : listOfProductsAndQuantities.entrySet()) {
                                Long product_id = (Long) mapElement.getKey();
                                int qty = (int) mapElement.getValue();
                                String sql_order_detail = "Insert into order_details (order_id,product_id,qty) values (?,?,?)";
                                String removeItemFromStock = "Update products set product_stock=product_stock-? where product_id=?";
                                stmt_remove_quantity = conn.prepareStatement(removeItemFromStock);
                                stmt_remove_quantity.setInt(1, qty);
                                stmt_remove_quantity.setLong(2, product_id);
                                stmt_remove_quantity.executeUpdate();
                                psmt_order_details = conn.prepareStatement(sql_order_detail);
                                psmt_order_details.setLong(1, order_id);
                                psmt_order_details.setLong(2, product_id);
                                psmt_order_details.setInt(3, qty);
                                psmt_order_details.execute();
                            }
                            conn.commit();
                            System.out.println("Order with id: " + order_id + " is successfully placed");
                        } else {
                            System.out.println("There is not enough stock available for this order");
                            conn.commit();
                        }
                    } catch (SQLIntegrityConstraintViolationException sqlIntegrityConstraintViolationException) {
                        System.out.println("Order already exists, cannot add this order no " + order_id);
                        try {

                            isOrderSubmitted = false;
                            conn.rollback();
                        } catch (SQLException sqlException) {
                            sqlException.printStackTrace();
                        }
                    } catch (SQLException sqlException) {
                        try {
                            isOrderSubmitted = false;
                            conn.rollback();
                        } catch (SQLException throwables) {
                            throwables.printStackTrace();
                        }
                        sqlException.printStackTrace();
                    } finally {
                        try {
                            if (isOrderSubmitted) {
                                psmt_order.close();
                                psmt_order_details.close();
                                stmt.close();
                            }
                            if (conn != null) {
                                conn.close();
                            }
                        } catch (SQLException sqlException) {
                            sqlException.printStackTrace();
                        }

                    }
                } else {
                    System.out.println("No products in this order, order cannot be placed");
                }
            } else {
                System.out.println("Invalid username and password, unknown username and password");
            }
        }
    }

    /***
     * This function is used to post the review on a product
     * @param reviewId review id. If passed -1, a new unique id will be generated
     * @param username username
     * @param password password
     * @param product_id product id for which review is to be posted
     * @param rating rating
     * @param reviewText review text
     * @param date date at which review was posted
     */
    @Override
    public void postReview(long reviewId, String username, String password, Long product_id, int rating, String reviewText, String date) {
        synchronized (postReviewLock) {
            Connection conn = null;
            PreparedStatement psmt = null;
            if (authorized(username, password)) {
                try {
                    conn = getMySQLDataSource().getConnection();
                    conn.setAutoCommit(false);
                    if (reviewId < 0) {
                        reviewId = Instant.now().getEpochSecond();
                    }
                    String sql = "Insert into reviews (reviewId,product_id,username,rating,reviewText,reviewDate) values (?,?,?,?,?,?)";
                    psmt = conn.prepareStatement(sql);
                    psmt.setLong(1, reviewId);
                    psmt.setLong(2, product_id);
                    psmt.setString(3, username);
                    psmt.setInt(4, rating);
                    psmt.setString(5, reviewText);
                    psmt.setString(6, date);
                    psmt.execute();
                    conn.commit();
                    System.out.println("Review has been posted for product with id " + product_id + " by user " + username);
                } catch (SQLIntegrityConstraintViolationException sqlIntegrityConstraintViolationException) {
                    System.out.println("User " + username + " has already posted review for product with id " + product_id + ". Cannot place another review");
                    try {
                        conn.rollback();
                    } catch (SQLException sqlException) {
                        sqlException.printStackTrace();
                    }
                } catch (SQLException sqlException) {
                    try {
                        conn.rollback();
                    } catch (SQLException throwables) {
                        throwables.printStackTrace();
                    }
                    sqlException.printStackTrace();
                } finally {
                    try {
                        psmt.close();
                        conn.close();
                    } catch (SQLException sqlException) {
                        sqlException.printStackTrace();
                    }

                }

            } else {
                System.out.println("Unable to post review, user is not authorized");
            }
        }
    }

    /**
     * This method is used to check if ordered products are present in the inventory or not
     * @param listOfProductsAndQuantities
     * @return: true if enough stock is present in the inventory else false
     */
    public boolean isEnoughStock(HashMap<Long, Integer> listOfProductsAndQuantities) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        int counter = 0;
        try {
            conn = getMySQLDataSource().getConnection();
            for (Map.Entry mapElement : listOfProductsAndQuantities.entrySet()) {
                Long product_id = (Long) mapElement.getKey();
                int qty = (int) mapElement.getValue();
                String sql = "Select product_id,product_stock from products where product_id=" + product_id;
                stmt = conn.createStatement();
                rs = stmt.executeQuery(sql);
                rs.next();
                if (qty > rs.getInt("product_stock")) {
                    missingProducts.add(product_id);
                    counter++;
                }
            }
            if (counter > 0) {
                return false;
            }
        } catch (SQLException sqlException) {
            System.out.println("Unable to check stock, error in db connection");
            return false;
        } finally {
            try {
                rs.close();
                stmt.close();
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException sqlException) {
                sqlException.printStackTrace();
            }
        }
        return true;
    }

    /***
     * Check if user is authorized
     * @param username
     * @param password
     * @return true if username and password matches else false
     */
    @Override
    public boolean authorized(String username, String password) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            conn = getMySQLDataSource().getConnection();
            stmt = conn.createStatement();
            String sqlSelectUser = "Select username from users where username='" + username + "' and password='" + password + "'";
            rs = stmt.executeQuery(sqlSelectUser);
            rs.next();
            return rs.isFirst();

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        } finally {
            try {
                rs.close();
                stmt.close();
                conn.close();
            } catch (SQLException sqlException) {
                System.out.println("Unable to close connection");
            }

        }

        return false;
    }

    /***
     * This method is used to add the product to the database
     * @param product_id product id. If passed -1, a new unique id will be generated
     * @param name: Name of the product
     * @param description: Product description
     * @param price: Price of the product
     * @param initialStock: Initial Stock of the Product to be added
     */
    @Override
    public void addProduct(long product_id, String name, String description, float price, int initialStock) {
        synchronized (addProductLock) {
            Connection conn = null;
            PreparedStatement pstmt = null;

            try {
                conn = getMySQLDataSource().getConnection();
                conn.setAutoCommit(false);
                if (product_id < 0) {
                    product_id = Instant.now().getEpochSecond();
                }
                String sql_insert_product = "Insert into products(product_id,product_name,product_description,product_price,product_stock) values(?,?,?,?,?)";
                pstmt = conn.prepareStatement(sql_insert_product);
                pstmt.setLong(1, product_id);
                pstmt.setString(2, name);
                pstmt.setString(3, description);
                pstmt.setFloat(4, price);
                pstmt.setInt(5, initialStock);
                pstmt.execute();
                conn.commit();
                System.out.println("Product with id " + product_id + " is added");
            } catch (SQLIntegrityConstraintViolationException sqlIntegrityConstraintViolationException) {
                System.out.println("Cannot add duplicate product " + name);
                try {
                    conn.rollback();
                } catch (SQLException sqlException) {
                    System.out.println("Unable to rollback, error: " + sqlException.getMessage());
                }
            } catch (SQLException sqlException) {
                sqlException.printStackTrace();
            } finally {
                try {
                    pstmt.close();
                    conn.close();
                } catch (SQLException sqlException) {
                    System.out.println("Unable close db connection");
                }

            }
        }
    }

    /***
     * This method is used to update the stock of a given product
     * @param product_id
     * @param itemCountToAdd
     */
    @Override
    public void updateStockLevel(int product_id, int itemCountToAdd) {
        synchronized (updateStockLevelLock) {
            Connection conn = null;
            PreparedStatement psmt = null;
            try {
                conn = getMySQLDataSource().getConnection();
                conn.setAutoCommit(false);
                String update_product_sql = "Update products set product_stock=product_stock+? where product_id=?";
                psmt = conn.prepareStatement(update_product_sql);
                psmt.setInt(1, itemCountToAdd);
                psmt.setInt(2, product_id);
                int rowsUpdated = psmt.executeUpdate();
                conn.commit();
                if (rowsUpdated >= 1) {
                    System.out.println("Product with id " + product_id + " is updated with new stock");
                } else {
                    System.out.println("No product with id " + product_id + " found ");
                }
            } catch (SQLException sqlException) {
                try {
                    conn.rollback();
                } catch (SQLException sqlException1) {
                    System.out.println("Unable to rollback transaction, due to issue: " + sqlException1.getMessage());
                }
                sqlException.printStackTrace();
            } finally {
                try {
                    psmt.close();
                    conn.close();
                } catch (SQLException sqlException) {
                    sqlException.printStackTrace();
                }

            }
        }
    }

    /***
     * This method is used to get the reviews of a given product
     * @param product_id
     */
    @Override
    public void getProductAndReviews(int product_id) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            conn = getMySQLDataSource().getConnection();
            String selectReviews = "Select * from reviews where product_id=" + product_id;
            stmt = conn.createStatement();
            rs = stmt.executeQuery(selectReviews);
            while (rs.next()) {
                System.out.println("User: " + rs.getString("username"));
                System.out.println("Rating: " + rs.getInt("rating"));
                System.out.println("Review text: " + rs.getString("reviewText"));
                System.out.println("Review Date: " + rs.getString("reviewDate"));
            }

        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        } finally {
            try {
                rs.close();
                stmt.close();
                conn.close();
            } catch (SQLException sqlException) {
                sqlException.printStackTrace();
            }
        }
    }

    /***
     * This method is to print the average user rating
     * @param username
     */
    @Override
    public void getAverageUserRating(String username) {
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            conn = getMySQLDataSource().getConnection();
            String selectAvgRating = "Select avg(rating) as averageRating from reviews where username='" + username + "'";
            stmt = conn.createStatement();
            rs = stmt.executeQuery(selectAvgRating);
            rs.next();
            System.out.println("Average rating by user: " + username + " is " + rs.getString("averageRating"));
        } catch (SQLException sqlException) {
            sqlException.printStackTrace();
        } finally {
            try {
                rs.close();
                stmt.close();
                conn.close();
            } catch (SQLException sqlException) {
                sqlException.printStackTrace();
            }
        }
    }

    public MysqlDataSource getMySQLDataSource() {
        Properties dbConnectionProp = new Properties();
        MysqlDataSource dataSource = null;
        FileInputStream dbPropFile = null;
        try {
            dbPropFile = new FileInputStream("properties/db.properties");
            dbConnectionProp.load(dbPropFile);
            dbPropFile.close();
            dataSource = new MysqlDataSource();
            dataSource.setURL(dbConnectionProp.getProperty("url"));
            dataSource.setUser(dbConnectionProp.getProperty("username"));
            dataSource.setPassword(dbConnectionProp.getProperty("password"));
        } catch (FileNotFoundException e) {

            System.out.println("Property File containing db details is not not found");
        } catch (IOException io) {
            System.out.println("Error reading the file");
        }
        return dataSource;
    }

    public HashSet<Long> getMissedProducts() {
        return missingProducts;
    }
}
